// <auto-generated />
using System;
using Aula.Server.Shared.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Aula.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Aula.Server.Domain.AccessControl.Role", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("Permissions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Aula.Server.Domain.AccessControl.RoleAssignment", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleAssignments");
                });

            modelBuilder.Entity("Aula.Server.Domain.Bans.Ban", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EmissionDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsLifted")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("IssuerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IssuerType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IssuerId");

                    b.ToTable("Bans");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Aula.Server.Domain.Files.File", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("SubmitterId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubmitterId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Aula.Server.Domain.Messages.Message", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("RoomId");

                    b.ToTable("Messages");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Aula.Server.Domain.Rooms.Room", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("BackgroundAudioId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEntrance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundAudioId");

                    b.ToTable("Rooms");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Aula.Server.Domain.Rooms.RoomConnection", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DestinationRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("SourceRoomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DestinationRoomId");

                    b.HasIndex("SourceRoomId");

                    b.ToTable("RoomConnections");
                });

            modelBuilder.Entity("Aula.Server.Domain.Users.User", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("CurrentRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Presence")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CurrentRoomId");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Aula.Server.Domain.Bans.UserBan", b =>
                {
                    b.HasBaseType("Aula.Server.Domain.Bans.Ban");

                    b.Property<ulong>("TargetUserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("TargetUserId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Aula.Server.Domain.Messages.DefaultMessage", b =>
                {
                    b.HasBaseType("Aula.Server.Domain.Messages.Message");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Aula.Server.Domain.Messages.UserJoinMessage", b =>
                {
                    b.HasBaseType("Aula.Server.Domain.Messages.Message");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Aula.Server.Domain.Messages.UserLeaveMessage", b =>
                {
                    b.HasBaseType("Aula.Server.Domain.Messages.Message");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Aula.Server.Domain.Rooms.StandardRoom", b =>
                {
                    b.HasBaseType("Aula.Server.Domain.Rooms.Room");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Aula.Server.Domain.Users.BotUser", b =>
                {
                    b.HasBaseType("Aula.Server.Domain.Users.User");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Aula.Server.Domain.Users.StandardUser", b =>
                {
                    b.HasBaseType("Aula.Server.Domain.Users.User");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LockoutEndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Aula.Server.Domain.AccessControl.RoleAssignment", b =>
                {
                    b.HasOne("Aula.Server.Domain.AccessControl.Role", "Role")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Aula.Server.Domain.Users.User", "User")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Aula.Server.Domain.Bans.Ban", b =>
                {
                    b.HasOne("Aula.Server.Domain.Users.User", "Issuer")
                        .WithMany("BansIssued")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Issuer");
                });

            modelBuilder.Entity("Aula.Server.Domain.Files.File", b =>
                {
                    b.HasOne("Aula.Server.Domain.Users.User", "Submitter")
                        .WithMany("FilesSubmitted")
                        .HasForeignKey("SubmitterId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Submitter");
                });

            modelBuilder.Entity("Aula.Server.Domain.Messages.Message", b =>
                {
                    b.HasOne("Aula.Server.Domain.Users.User", "Author")
                        .WithMany("MessagesSent")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Aula.Server.Domain.Rooms.Room", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Aula.Server.Domain.Rooms.Room", b =>
                {
                    b.HasOne("Aula.Server.Domain.Files.File", "BackgroundAudio")
                        .WithMany("ChatsUsingAsBackgroundAudio")
                        .HasForeignKey("BackgroundAudioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BackgroundAudio");
                });

            modelBuilder.Entity("Aula.Server.Domain.Rooms.RoomConnection", b =>
                {
                    b.HasOne("Aula.Server.Domain.Rooms.Room", "TargetRoom")
                        .WithMany("Origins")
                        .HasForeignKey("DestinationRoomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Aula.Server.Domain.Rooms.Room", "SourceRoom")
                        .WithMany("Destinations")
                        .HasForeignKey("SourceRoomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("SourceRoom");

                    b.Navigation("TargetRoom");
                });

            modelBuilder.Entity("Aula.Server.Domain.Users.User", b =>
                {
                    b.HasOne("Aula.Server.Domain.Rooms.Room", "CurrentRoom")
                        .WithMany("Residents")
                        .HasForeignKey("CurrentRoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CurrentRoom");
                });

            modelBuilder.Entity("Aula.Server.Domain.Bans.UserBan", b =>
                {
                    b.HasOne("Aula.Server.Domain.Users.User", "TargetUser")
                        .WithMany("BansReceived")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("Aula.Server.Domain.Messages.UserJoinMessage", b =>
                {
                    b.OwnsOne("Aula.Server.Domain.Messages.MessageUserJoin", "JoinData", b1 =>
                        {
                            b1.Property<ulong>("UserJoinMessageId")
                                .HasColumnType("INTEGER");

                            b1.Property<ulong?>("PreviousRoomId")
                                .HasColumnType("INTEGER");

                            b1.Property<ulong>("UserId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("UserJoinMessageId");

                            b1.HasIndex("PreviousRoomId");

                            b1.HasIndex("UserId");

                            b1.ToTable("Messages");

                            b1.HasOne("Aula.Server.Domain.Rooms.Room", "PreviousRoom")
                                .WithMany()
                                .HasForeignKey("PreviousRoomId");

                            b1.HasOne("Aula.Server.Domain.Users.User", "User")
                                .WithMany()
                                .HasForeignKey("UserId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("UserJoinMessageId");

                            b1.Navigation("PreviousRoom");

                            b1.Navigation("User");
                        });

                    b.Navigation("JoinData")
                        .IsRequired();
                });

            modelBuilder.Entity("Aula.Server.Domain.Messages.UserLeaveMessage", b =>
                {
                    b.OwnsOne("Aula.Server.Domain.Messages.MessageUserLeave", "LeaveData", b1 =>
                        {
                            b1.Property<ulong>("UserLeaveMessageId")
                                .HasColumnType("INTEGER");

                            b1.Property<ulong?>("NextRoomId")
                                .HasColumnType("INTEGER");

                            b1.Property<ulong>("UserId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("UserLeaveMessageId");

                            b1.HasIndex("NextRoomId");

                            b1.HasIndex("UserId");

                            b1.ToTable("Messages");

                            b1.HasOne("Aula.Server.Domain.Rooms.Room", "NextRoom")
                                .WithMany()
                                .HasForeignKey("NextRoomId");

                            b1.HasOne("Aula.Server.Domain.Users.User", "User")
                                .WithMany()
                                .HasForeignKey("UserId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("UserLeaveMessageId");

                            b1.Navigation("NextRoom");

                            b1.Navigation("User");
                        });

                    b.Navigation("LeaveData")
                        .IsRequired();
                });

            modelBuilder.Entity("Aula.Server.Domain.AccessControl.Role", b =>
                {
                    b.Navigation("RoleAssignments");
                });

            modelBuilder.Entity("Aula.Server.Domain.Files.File", b =>
                {
                    b.Navigation("ChatsUsingAsBackgroundAudio");
                });

            modelBuilder.Entity("Aula.Server.Domain.Rooms.Room", b =>
                {
                    b.Navigation("Destinations");

                    b.Navigation("Messages");

                    b.Navigation("Origins");

                    b.Navigation("Residents");
                });

            modelBuilder.Entity("Aula.Server.Domain.Users.User", b =>
                {
                    b.Navigation("BansIssued");

                    b.Navigation("BansReceived");

                    b.Navigation("FilesSubmitted");

                    b.Navigation("MessagesSent");

                    b.Navigation("RoleAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
